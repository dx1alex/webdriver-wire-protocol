declare class WebdriverWireProtocol {
    constructor(options: any);
}
export default WebdriverWireProtocol;
interface WebdriverWireProtocol {
    getStatus(): Promise<any>;
    initSession(options: any): Promise<any>;
    getSession(options: any): Promise<any>;
    getSessions(): Promise<any>;
    quit(options: any): Promise<any>;
    setTimeout(options: any): Promise<any>;
    setScriptTimeout(options: any): Promise<any>;
    setImplicitWait(options: any): Promise<any>;
    getWindow(options: any): Promise<any>;
    getWindows(options: any): Promise<any>;
    switchToWindow(options: any): Promise<any>;
    closeWindow(options: any): Promise<any>;
    setWindowSize(options: any): Promise<any>;
    getWindowSize(options: any): Promise<any>;
    setWindowPosition(options: any): Promise<any>;
    getWindowPosition(options: any): Promise<any>;
    maximizeWindow(options: any): Promise<any>;
    switchToFrame(options: any): Promise<any>;
    switchToParentFrame(options: any): Promise<any>;
    getUrl(options: any): Promise<any>;
    openUrl(options: any): Promise<any>;
    goForward(options: any): Promise<any>;
    goBack(options: any): Promise<any>;
    refresh(options: any): Promise<any>;
    getSource(options: any): Promise<any>;
    getTitle(options: any): Promise<any>;
    getCookies(options: any): Promise<any>;
    setCookie(options: any): Promise<any>;
    deleteAllCookies(options: any): Promise<any>;
    deleteCookie(options: any): Promise<any>;
    setAlertPrompt(options: any): Promise<any>;
    getAlertMessage(options: any): Promise<any>;
    acceptAlert(options: any): Promise<any>;
    dismissAlert(options: any): Promise<any>;
    type(options: any): Promise<any>;
    executeScript(options: any): Promise<any>;
    executeAsyncScript(options: any): Promise<any>;
    screenshot(options: any): Promise<any>;
    findElement(options: any): Promise<any>;
    findElements(options: any): Promise<any>;
    getActiveElement(options: any): Promise<any>;
    findChildElement(options: any): Promise<any>;
    findChildElements(options: any): Promise<any>;
    clickElement(options: any): Promise<any>;
    clearElement(options: any): Promise<any>;
    submitElement(options: any): Promise<any>;
    getElementText(options: any): Promise<any>;
    typeElement(options: any): Promise<any>;
    getElementTagName(options: any): Promise<any>;
    getElementAttribute(options: any): Promise<any>;
    getElementCssProperty(options: any): Promise<any>;
    getElementSize(options: any): Promise<any>;
    getElementLocation(options: any): Promise<any>;
    getElementLocationInView(options: any): Promise<any>;
    isElementSelected(options: any): Promise<any>;
    isElementEnabled(options: any): Promise<any>;
    isElementEqual(options: any): Promise<any>;
    isElementDysplayed(options: any): Promise<any>;
    mouseMoveTo(options: any): Promise<any>;
    mouseClick(options: any): Promise<any>;
    mouseDoubleClick(options: any): Promise<any>;
    mouseDown(options: any): Promise<any>;
    mouseUp(options: any): Promise<any>;
    touchClick(options: any): Promise<any>;
    touchDown(options: any): Promise<any>;
    touchUp(options: any): Promise<any>;
    touchMove(options: any): Promise<any>;
    touchScroll(options: any): Promise<any>;
    touchDoubleClick(options: any): Promise<any>;
    touchLongClick(options: any): Promise<any>;
    touchFlick(options: any): Promise<any>;
    getOrientation(options: any): Promise<any>;
    setOrientation(options: any): Promise<any>;
    getGeoLocation(options: any): Promise<any>;
    setGeoLocation(options: any): Promise<any>;
    setLocalStorage(options: any): Promise<any>;
    getLocalStorageKeys(options: any): Promise<any>;
    clearLocalStorage(options: any): Promise<any>;
    getLocalStorageValue(options: any): Promise<any>;
    deleteLocalStorageValue(options: any): Promise<any>;
    getLocalStorageSize(options: any): Promise<any>;
    getSessionStorageKeys(options: any): Promise<any>;
    setSessionStorage(options: any): Promise<any>;
    deleteSessionStorage(options: any): Promise<any>;
    getSessionStorageValue(options: any): Promise<any>;
    deleteSessionStorageValue(options: any): Promise<any>;
    getSessionStorageSize(options: any): Promise<any>;
    getLog(options: any): Promise<any>;
    getLogTypes(options: any): Promise<any>;
    getAppCacheStatus(options: any): Promise<any>;
    getImeAvailableEngines(options: any): Promise<any>;
    getImeActiveEngine(options: any): Promise<any>;
    isImeActivated(options: any): Promise<any>;
    deactivateIme(options: any): Promise<any>;
    activateIme(options: any): Promise<any>;
}
